{"mappings":"gfAEA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAkB/B,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAqBP,SAASQ,EAAUC,G,IAAEV,EAAFU,EAAEV,SAAUC,EAAZS,EAAYT,MAC7BR,EAAAkB,OAAOC,QAAQ,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,CAG/D,SAASa,EAASJ,G,IAAEV,EAAFU,EAAEV,SAAUC,EAAZS,EAAYT,MAC5BR,EAAAkB,OAAOI,QAAQ,sBAAqCF,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,CApD5De,QAAQC,IAAItB,GAEZA,EAAKC,KAAKsB,iBAAiB,UAAU,SAAAC,GACnCA,EAAEC,iBACF,IAIIC,EAAAF,EAAEG,cAAcC,SAHTtB,EAGPoB,EAHFpB,MAASuB,MACDC,EAENJ,EAFFI,KAAQD,MACEE,EACRL,EADFK,OAAUF,MAEZR,QAAQC,IAAIhB,EAAOwB,EAAMC,GAgC3B,SAAwBzB,EAAOwB,EAAMC,GACnC,IAAK,IAAIC,EAAI,EAAGC,EAAa3B,EAAO0B,GAAKD,EAAQC,GAAK,EAAGC,GAAcH,EACrE1B,EAAc4B,EAAGC,GAAYC,KAAKpB,GAAWqB,MAAMhB,E,CA/BrDiB,CAAeC,SAAS/B,GAAQ+B,SAASP,GAAOO,SAASN,G","sources":["src/js/03-promises.js"],"sourcesContent":["// Write a script that, when submitting the form, calls the createPromise(position, delay) function as many times as you entered in the amount field. On each call, pass it the number of the promise to be created (position) and the delay given the first delay (delay) and step (step) entered by the user.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nconsole.log(refs);\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n  const {\n    delay: { value: delay },\n    step: { value: step },\n    amount: { value: amount },\n  } = e.currentTarget.elements;\n  console.log(delay, step, amount);\n\n  //exec(delay, step, amount));\n  simplePromises(parseInt(delay), parseInt(step), parseInt(amount));\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// async function exec(delay, step, amount) {\n//   for (let i = 1; i <= amount; i += 1) {\n//     const innerDel = i === 1 ? delay : step;\n//     try {\n//       let res = await createPromise(i, delay).onResolve(res);\n//     } catch (err) {\n//       onReject(err);\n//     }\n//   }\n// }\n\nfunction simplePromises(delay, step, amount) {\n  for (let i = 1, innerDelay = delay; i <= amount; i += 1, innerDelay += step) {\n    createPromise(i, innerDelay).then(onResolve).catch(onReject);\n  }\n}\n\nfunction onResolve({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onReject({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$onResolve","param","Notify","success","concat","$ce04d3a99e08e73b$var$onReject","failure","console","log","addEventListener","e","preventDefault","_elements","currentTarget","elements","value","step","amount","i","innerDelay","then","catch","$ce04d3a99e08e73b$var$simplePromises","parseInt"],"version":3,"file":"03-promises.8b665868.js.map"}